// Generated by CoffeeScript 1.6.2
define(['text!./draw.tmpl.html', 'views/shapePicker.view', 'views/colorPicker.view', 'models/shape.model'], function(tmpl, ShapePicker, ColorPicker, ShapeModel) {
  var Page;

  Page = Backbone.View.extend({
    className: 'drawPage',
    template: _.template(tmpl),
    events: {
      'click canvas': 'addShape',
      'click #Reset': 'reset'
    },
    initialize: function() {
      this.model = this.options.app;
      this.shapes = new Backbone.Collection();
      this.listenTo(this.model, 'change', this.render);
      this.listenTo(this.shapes, 'add', this.render);
      return this.listenTo(this.shapes, 'reset', this.render);
    },
    render: function() {
      var $Pickers;

      this.$el.html(this.template(this.model.attributes));
      this.pickShape = new ShapePicker({
        'app': this.options.app
      });
      this.pickColor = new ColorPicker({
        'app': this.options.app
      });
      $Pickers = this.$('#Pickers');
      $Pickers.append(this.pickColor.render().el);
      $Pickers.append(this.pickShape.render().el);
      this.renderShapes();
      return this;
    },
    renderShapes: function() {
      var ctx, shapes,
        _this = this;

      ctx = this.$('canvas')[0].getContext('2d');
      shapes = this.options.app.shapes;
      return this.shapes.each(function(shape) {
        var s;

        s = shape.attributes;
        switch (s.shape) {
          case shapes.CIRCLE:
            return _this.drawCircle(ctx, s);
          case shapes.SQUARE:
            return _this.drawRect(ctx, s);
          default:
            return console.error('unknown shape');
        }
      });
    },
    drawRect: function(ctx, shape) {
      ctx.fillStyle = shape.color;
      return ctx.fillRect(shape.x, shape.y, shape.width, shape.height);
    },
    drawCircle: function(ctx, shape) {
      ctx.fillStyle = shape.color;
      ctx.beginPath();
      ctx.arc(shape.x, shape.y, shape.width / 2, 0, Math.PI * 2, true);
      ctx.closePath();
      return ctx.fill();
    },
    addShape: function(e) {
      var newShape, offset;

      offset = this.$('canvas').offset();
      newShape = new ShapeModel({
        x: e.clientX - offset.left,
        y: e.clientY - offset.top,
        color: this.model.attributes.curColor,
        shape: this.model.attributes.curShape
      });
      return this.shapes.add(newShape);
    },
    reset: function() {
      return this.shapes.reset();
    }
  });
  return Page;
});
